import React, { useState } from "react";
import { useGameStore } from "../../store/gameStore";
import CharacterPage from "../pages/CharacterPage";
import MapPage from "../pages/MapPage";
import Item from "./Item";
import ObjectComponent from "../Objects";
const Inventory: React.FC = () => {
  const {
    hands,
    equipped,
    hotbar,
    selectedItem,
    setSelectedItem,
    simulateBackendUpdate,
  } = useGameStore();

  const [activeTab, setActiveTab] = useState<"character" | "map" | "camera">(
    "character"
  );
  const [currentLayer, setCurrentLayer] = useState<number>(0);
  const [mousePosition, setMousePosition] = useState<[number, number]>([0, 0]);

  const handleItemClick = (item: any | null) => {
    setSelectedItem(selectedItem?.id === item?.id ? null : item);
  };

  const handleDrop = async (slot: string) => {
    if (selectedItem) {
      await simulateBackendUpdate(selectedItem, slot);
    }
  };
  const blockState = {
    0: { texture: "stone", model: "box", RigidBody: "fixed", RigidBodyType: "cuboid" },
    1: { texture: "wood", model: "globe", RigidBody: "fixed", RigidBodyType: "cuboid" },
    2: { texture: "brick", model: "stairs", RigidBody: "fixed", RigidBodyType: "cuboid" },
  };

  const customModels = {
    stairs: [
      { position: [0, 0, 0.5], rotation: [0, 0, 0], render: true },
      { position: [0, 0, 0], rotation: [-Math.PI / 2, 0, 0], render: true },
    ],
  };

  const textures = {
    stone: "/assets/textures/cubes/stone.png",
    wood: "/assets/textures/cubes/wood.png",
    brick: "/assets/textures/cubes/stone.png",
  };

  const cubesArray = [];
  for (let x = -10; x <= 10; x++) {
    for (let z = -10; z <= 10; z++) {
      cubesArray.push([x, 0, z, 0]);
    }
  }

  const chunks = [
    {
      position: [1, 0, 0],
      cubesArray: cubesArray,
    },
  ];
  const handleMouseMove = (e: React.MouseEvent) => {
    setMousePosition([e.clientX, e.clientY]);
  };

  const renderMapGrid = (): JSX.Element[] => {
    const gridSize = 10; // Tamanho do grid
    const cellSize = 50; // Tamanho das células
    const { chunks, blockState } = useGameStore.getState();

    const currentChunk = chunks[0] || { cubesArray: Array(gridSize).fill(Array(gridSize).fill(0)) };
    const { cubesArray } = currentChunk;

    return cubesArray.flatMap((row, y) =>
      row.map((blockType, x) => (
        <div
          key={`${x}-${y}`}
          style={{
            width: `${cellSize}px`,
            height: `${cellSize}px`,
            border: "1px solid #444",
            backgroundColor: blockState[blockType] ? "#666" : "#222",
          }}
        />
      ))
    );
  };

  const handleLayerChange = (delta: number) => {
    setCurrentLayer((prev) => prev + delta);
  };

  return (
    <div
      style={{
        position: "fixed",
        top: "50%",
        left: "50%",
        transform: "translate(-50%, -50%)",
        width: "80%",
        height: "90%",
        display: "flex",
        flexDirection: "column",
        backgroundColor: "#222",
        color: "#fff",
        border: "2px solid #444",
        borderRadius: "10px",
        overflow: "hidden",
      }}
      onMouseMove={handleMouseMove}
    >
      {/* Equipados */}
      <div style={{ flex: "1", display: "flex", overflow: "hidden" }}>

        <div
          style={{
            flex: "0 0 25%",
            backgroundColor: "#111",
            borderRight: "2px solid #444",
            display: "flex",
            flexDirection: "column",
            overflowY: "auto",
          }}
        >
          <h4 style={{ padding: "10px", borderBottom: "1px solid #444" }}>
            Receitas
          </h4>
          <div
            style={{
              flex: "0 0 150px",
              backgroundColor: "#333",
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              zIndex: 1,
            }}
          >
            <div
              style={{
                flex: "0 0 auto",
                backgroundColor: "#333",
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                position: "relative", // Para permitir controle do canvas
                height: "150px", // Altura fixa ajustada para o canvas
                width: "100%", // Largura total para o container
              }}
            >
              {/* ObjectComponent centralizado */}
              <div
                style={{
                  position: "absolute",
                  top: 0,
                  left: 0,
                  width: "100%",
                  height: "100%",
                }}
              >
                <ObjectComponent
                  customModels={customModels}
                  blockState={blockState}
                  textures={textures}
                  chunks={chunks}
                />
              </div>
            </div>
          </div>

          <h4 style={{ padding: "10px", borderBottom: "1px solid #444" }}>
            Equipados
          </h4>
          <ul style={{ padding: "10px" }}>
            {Object.entries(equipped).map(([slot, item]) => (
              <li
                key={slot}
                style={{
                  marginBottom: "10px",
                  cursor: "pointer",
                  padding: "5px",
                  backgroundColor: selectedItem?.id === item?.id ? "#333" : "transparent",
                  border: "1px dashed #777",
                }}
                onClick={(e) => {
                  e.stopPropagation();
                  handleItemClick(item);
                }}
                onDrop={() => handleDrop(slot)}
                onDragOver={(e) => e.preventDefault()}
              >
                {slot.charAt(0).toUpperCase() + slot.slice(1)}: {item ? <Item item={item} /> : "Vazio"}
                {item?.pockets && (
                  <div
                    style={{
                      marginTop: "10px",
                      display: "grid",
                      gridTemplateColumns: "repeat(5, 1fr)",
                      gap: "10px",
                    }}
                  >
                    {item.pockets.map((pocketItem, index) =>
                      pocketItem ? (
                        <Item
                          key={index}
                          item={pocketItem}
                          isSelected={selectedItem?.id === pocketItem.id}
                          onClick={(e) => {
                            e.stopPropagation();
                            handleItemClick(pocketItem);
                          }}
                        />
                      ) : (
                        <div
                          key={`empty-${index}`}
                          style={{
                            width: "50px",
                            height: "50px",
                            backgroundColor: "#333",
                            border: "2px dashed #777",
                          }}
                        />
                      )
                    )}
                  </div>
                )}
              </li>
            ))}
          </ul>
        </div>

        {/* Área de interação no centro */}
        <div
          style={{
            flex: "1",
            display: "flex",
            flexDirection: "column",
            position: "relative",
          }}
        > {/* Botões fixos no topo */}
          <div
            style={{
              position: "absolute",
              top: 0,
              left: 0,
              right: 0,
              display: "flex",
              justifyContent: "center",
              backgroundColor: "#111",
              zIndex: 99,
            }}
          >
            <button
              onClick={() => setActiveTab("character")}
              style={{
                padding: "10px 20px",
                backgroundColor:
                  activeTab === "character" ? "#ff5722" : "#444",
                color: "#fff",
                border: "none",
                borderRadius: "5px",
                cursor: "pointer",
              }}
            >
              Personagem
            </button>
            <button
              onClick={() => setActiveTab("map")}
              style={{
                padding: "10px 20px",
                backgroundColor: activeTab === "map" ? "#ff5722" : "#444",
                color: "#fff",
                border: "none",
                borderRadius: "5px",
                cursor: "pointer",
              }}
            >
              Mapa
            </button>
          </div>


          {activeTab === "character" && (
            <canvas
              id="character-model"
              style={{
                width: "100%",
                height: "100%",
                backgroundColor: "#000",
                zIndex: 1
              }}
            ><CharacterPage /></canvas>
          )}


          {activeTab === "map" && (
            <div
              style={{
                position: "absolute",
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                display: "flex", // Centraliza o grid no contêiner
                justifyContent: "center",
                alignItems: "center",
                backgroundColor: "#000", // Cor de fundo para visualização
                zIndex: 1
              }}
            >
              <div
                style={{
                  display: "grid",
                  gridTemplateColumns: `repeat(10, 1fr)`,
                  gridTemplateRows: `repeat(10, 1fr)`,
                  gap: 0, // Remove espaços entre células do mapa
                }}
              >
                {renderMapGrid()}
              </div>
            </div>
          )}

        </div>
      </div>


      {/* Hotbar */}
      <div
        style={{
          flex: "0 0 10%",
          display: "grid",
          gridTemplateColumns: "repeat(9, 1fr)",
          gap: "5px",
          backgroundColor: "#111",
          padding: "10px",
        }}
      >
        {[hands.left, hands.right, ...hotbar.slice(2)].map((item, index) => (
          <Item
            key={index}
            item={item}
            isSelected={selectedItem?.id === item?.id}
            onClick={() => handleItemClick(item)}
          />
        ))}
      </div>
    </div>
  );
};

export default Inventory;  import create from "zustand";

export interface Item {
  id: string;
  name: string;
  type?: string;
  img: string;
  value: number;
  isFavorite?: boolean;
  pockets?: (Item | null)[]; // Itens associados ao bolso (agora inclui espaços vazios)
}

export interface Machine {
  id: string;
  name: string;
  storage: (Item | null)[]; // Armazena itens ou espaços vazios
}

export type Entity = {
  id: string;
  position: [number, number, number];
  rotation: [number, number, number, number];
};

export type Chunk = {
  position: number[];
  cubesArray: number[][];
};

export type BlockState = {
  [key: number]: {
    name: string;
    texture: string;
    model: string;
    textures: string[];
    RigidBody: string;
    RigidBodyType: string;
    type: number;
    interface?: string; // Representa uma interface vinculada ao bloco
  };
};

export type CustomModel = {
  position: number[];
  rotation: number[];
  render: boolean;
};

export type GameStore = {
  // Inventário e Máquinas
  gravityEnabled: boolean; // New property to manage gravity
  setGravityEnabled: (value: boolean) => void; // New method to update gravity state
  hands: { left: Item | null; right: Item | null };
  equipped: { [slot: string]: Item | null };
  inventory: Item[];
  hotbar: (Item | null)[];
  machines: Machine[];
  selectedItem: Item | null;
  mousePosition: { x: number; y: number } | null;

  setSelectedItem: (item: Item | null) => void;
  setMousePosition: (x: number, y: number) => void;
  updateInventory: (newData: Partial<GameStore>) => void;
  simulateBackendUpdate: (selectedItem: Item, targetSlot: string) => Promise<void>;
  setHands: (hand: "left" | "right", item: Item | null) => void;
  setEquipped: (slot: string, item: Item | null) => void;
  addToInventory: (item: Item) => void;
  addMachine: (machine: Machine) => void;

  // Chunks e Entidades
  entities: Entity[];
  setEntities: (entities: Entity[]) => void;
  addEntity: (id: string, position: [number, number, number], rotation: [number, number, number, number]) => void;
  chunkPosition: [number, number, number];
  setChunkPosition: (newPosition: [number, number, number]) => void;
  chunks: Chunk[];
  setChunks: (chunks: Chunk[]) => void;
  addChunk: (chunk: Chunk) => void;

  // Blocos e Modelos Personalizados
  blockState: BlockState;
  setBlockState: (index: number, newState: BlockState[number]) => void;
  customModels: { [key: string]: CustomModel[] };
  setCustomModels: (modelName: string, newConfig: CustomModel[]) => void;

  // Texturas
  textures: { [key: string]: string };
  setTextures: (textureName: string, url: string) => void;

  // Controle de Interface
  interfaceOpen: boolean;
  setInterfaceOpen: (value: boolean) => void;
};

export const useGameStore = create<GameStore>((set) => ({
  // Inventário e Máquinas
  gravityEnabled: true, // Default to true
  setGravityEnabled: (value) => set({ gravityEnabled: value }), // Method to update gravity state
  hands: { left: null, right: null },
  equipped: { head: null, chest: null, legs: null, feet: null },
  inventory: [],
  hotbar: Array(9).fill(null),
  machines: [],
  selectedItem: null,
  mousePosition: null,

  setSelectedItem: (item) => set(() => ({ selectedItem: item })),
  setMousePosition: (x, y) => set(() => ({ mousePosition: { x, y } })),
  updateInventory: (newData) => set((state) => ({ ...state, ...newData })),
  simulateBackendUpdate: async (selectedItem, targetSlot) => {
    return new Promise((resolve) => {
      setTimeout(() => {
        const state = useGameStore.getState();
        const { equipped, inventory } = state;

        if (selectedItem.id === targetSlot) {
          console.error("Você não pode colocar um item dentro de si mesmo.");
          return resolve();
        }

        if (equipped[targetSlot]) {
          const temp = equipped[targetSlot];
          equipped[targetSlot] = selectedItem;
          inventory.push(temp);
        } else {
          equipped[targetSlot] = selectedItem;
        }

        set({
          equipped,
          inventory: inventory.filter((item) => item.id !== selectedItem.id),
          selectedItem: null,
        });
        resolve();
      }, 500);
    });
  },

  setHands: (hand, item) =>
    set((state) => ({
      hands: { ...state.hands, [hand]: item },
    })),
  setEquipped: (slot, item) =>
    set((state) => ({
      equipped: { ...state.equipped, [slot]: item },
    })),
  addToInventory: (item) =>
    set((state) => ({
      inventory: [...state.inventory, item],
    })),
  addMachine: (machine) =>
    set((state) => ({
      machines: [...state.machines, machine],
    })),

  // Chunks e Entidades
  entities: [],
  setEntities: (entities) => set({ entities }),
  addEntity: (id, position, rotation) =>
    set((state) => {
      const entityExists = state.entities.some((entity) => entity.id === id);
      if (!entityExists) {
        return { entities: [...state.entities, { id, position, rotation }] };
      }
      return state;
    }),

  chunkPosition: [0, 0, 0],
  setChunkPosition: (newPosition) => set({ chunkPosition: newPosition }),
  chunks: [],
  setChunks: (chunks) => set({ chunks }),
  addChunk: (chunk) =>
    set((state) => {
      const chunkExists = state.chunks.some((c) =>
        c.position.every((value, index) => value === chunk.position[index])
      );
      if (!chunkExists) {
        return { chunks: [...state.chunks, chunk] };
      }
      return state;
    }),

  // Blocos e Modelos Personalizados
  blockState: {
    0: {
      name: "Grass",
      texture: "/assets/textures/grass.png",
      model: "block",
      textures: ["/assets/textures/grass_side.png"],
      RigidBody: "fixed",
      RigidBodyType: "cuboid",
      type: 0,
    },
    1: {
      name: "Stone",
      texture: "/assets/textures/stone.png",
      model: "block",
      textures: ["/assets/textures/stone.png"],
      RigidBody: "fixed",
      RigidBodyType: "cuboid",
      type: 1,
    },
    // Outros blocos...
  },
  setBlockState: (index, newState) =>
    set((state) => ({
      blockState: { ...state.blockState, [index]: newState },
    })),
  customModels: {
    custombox: [
      { position: [0, 0, 0.5], rotation: [0, 0, 0], render: true },
      { position: [0, 0, -0.5], rotation: [0, Math.PI, 0], render: true },
    ],
  },
  setCustomModels: (modelName, newConfig) =>
    set((state) => ({
      customModels: { ...state.customModels, [modelName]: newConfig },
    })),

  // Texturas
  textures: { stone: "/assets/textures/cubes/stone.png" },
  setTextures: (textureName, url) =>
    set((state) => ({
      textures: { ...state.textures, [textureName]: url },
    })),

  // Controle de Interface
  interfaceOpen: false,
  setInterfaceOpen: (value) => set({ interfaceOpen: value }),
}));
// Seed para popular o estado inicial
export const seedStorage = () => {
  const { setHands, setEquipped, addToInventory } = useGameStore.getState();

  // Configura as mãos
  setHands("left", { id: "hand_item1", name: "Martelo", img: "/images/hammer.png", value: 150 });
  setHands("right", { id: "hand_item2", name: "Picareta", img: "/images/pickaxe.png", value: 120 });

  // Configura itens equipados com espaços vazios
  setEquipped("head", {
    id: "helmet1",
    name: "Capacete de Ferro",
    img: "/images/iron_helmet.png",
    value: 200,
    pockets: Array(5).fill(null), // Capacete com 5 slots vazios
  });
  setEquipped("chest", {
    id: "chestplate1",
    name: "Mochila",
    img: "/images/backpack.png",
    value: 300,
    pockets: Array(80) // Mochila com 80 slots vazios
      .fill(null)
      .map((_, i) =>
        i < 10
          ? {
            id: `pocket_item_${i + 1}`,
            name: `Item ${i + 1}`,
            img: "/images/item.png",
            value: 50,
          }
          : null
      ),
  });
  setEquipped("legs", {
    id: "leggings1",
    name: "Calças de Couro",
    img: "/images/leather_pants.png",
    value: 250,
    pockets: Array(12).fill(null), // Calças com 12 slots vazios
  });
  setEquipped("feet", {
    id: "boots1",
    name: "Botas de Ferro",
    img: "/images/iron_boots.png",
    value: 100,
    pockets: Array(8).fill(null), // Botas com 8 slots vazios
  });

  // Adiciona itens ao inventário com espaços vazios
  addToInventory({
    id: "item1",
    name: "Espada",
    img: "/images/sword.png",
    value: 100,
    pockets: Array(5).fill(null), // Espada com 5 slots vazios para teste
  });
  addToInventory({
    id: "item2",
    name: "Escudo",
    img: "/images/shield.png",
    value: 150,
    pockets: Array(3).fill(null), // Escudo com 3 slots vazios para teste
  });
  addToInventory({
    id: "item3",
    name: "Poção de Vida",
    img: "/images/health_potion.png",
    value: 50,
  });

  // Adiciona máquinas com espaços vazios
  const machines = [
    {
      id: "machine1",
      name: "Forja",
      storage: Array(20).fill(null), // Forja com 20 slots vazios
    },
    {
      id: "machine2",
      name: "Banco de Trabalho",
      storage: Array(10).fill(null), // Banco de trabalho com 10 slots vazios
    },
  ];

  // Atualiza o Zustand com as máquinas
  useGameStore.setState((state) => ({
    machines: [...state.machines, ...machines],
  }));
};

seedStorage(); vamos fazer com que o chunk do jogo seja configurado em:
parts(lista de chunks que nao podem se sobrescrever, e que nao tem material, a ideia é que cada chunk seja uma peça que recebe um material, que esta logo a frente do chunk na lista, algo como
parts:[part,material]